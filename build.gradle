
allprojects {
  ext {
    scalaVersion = "2.9.3"
    testVersion = "2.0.M5b"
    groovyVersion = "2.1.2"
    junitVersion = "4.11"

    compile = { dir, f, src, trg, command, arguments ->
      task("$dir/$f"+".$trg",type:Exec) {
        inputs.file file("$dir/$f"+".$src")
        outputs.dir file("build/$dir/$f"+".$trg")

        environment << System.getenv()
        commandLine command
        args arguments

        standardOutput = new ByteArrayOutputStream()

        doLast {
          println standardOutput.toString()
        }
      }
    }

    less = { dir, file ->
      compile(dir,file,"less","css","lessc",["$dir/${file}.less","build/$dir/${file}.css"])
    }

    coffee = { dir, file ->
      compile(dir,file,"coffee","js","coffee",["-o","build/$dir","-c","$dir/${file}.coffee"])
    }

    markup = { target, source ->
      task(target) {
        ext.sources = ["../kernel/assets/scripts/template.coffee",source].flatten()

        inputs.files sources.collect { i -> file(i) }
        outputs.file file("build/$target")

        def stdin = new SequenceInputStream(
          Collections.enumeration(
            sources.collect { i -> new FileInputStream(new File(i))}))

        def stdout = new ByteArrayOutputStream()

        exec {
            commandLine "coffee", "-s"
            standardInput = stdin
            standardOutput = stdout
            environment << System.getenv()
        }

        doLast {
          def file = new File("build/$target")
          file.parentFile.mkdirs()
          file.withWriter { i -> i.println(stdout.toString()) }
        }
      }
    }
  }

  apply plugin: "eclipse"

  task projects(dependsOn:["cleanEclipse","eclipseProject","eclipseClasspath"]) << {
  }

  /*task wrapper(type: Wrapper) {
	  gradleVersion = "1.3"
  }*/

  eclipse {
      classpath {
         downloadSources=true
         downloadJavadoc=true
      }
  }

  repositories {
    mavenCentral()

    maven {
      url "http://download.eclipse.org/rt/eclipselink/maven.repo"
    }
  }

  dependencies {
  }
}

defaultTasks "installApp"

apply plugin: "scala"
apply plugin: "application"

sourceSets {
	main {
		scala {
			srcDirs = ["src/main"]
		}
	}

  test {
    scala {
      srcDirs = ["src/test"]
    }
  }
}

dependencies {
  compile project(":kernel")
  scalaTools group:"org.scala-lang", name:"scala-compiler", version:ext.scalaVersion
  compile group:"org.scala-lang", name:"scala-library", version:ext.scalaVersion
}

applicationDistribution.from("$projectDir/app") {
	into "app"
}



